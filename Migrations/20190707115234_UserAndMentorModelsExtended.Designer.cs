// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mentor_api.Data;

namespace mentor_API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190707115234_UserAndMentorModelsExtended")]
    partial class UserAndMentorModelsExtended
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("mentor_api.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("mentor_api.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("PostalCode");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("mentor_api.Models.Mentor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("TeachingInformation");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("mentor_api.Models.MentorCity", b =>
                {
                    b.Property<int>("MentorId");

                    b.Property<int>("CityId");

                    b.HasKey("MentorId", "CityId");

                    b.HasIndex("CityId");

                    b.ToTable("MentorCities");
                });

            modelBuilder.Entity("mentor_api.Models.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MentorId");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.HasIndex("MentorId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("mentor_api.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("MentorId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("MentorId")
                        .IsUnique();

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("mentor_api.Models.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MentorId");

                    b.Property<double>("Price30Min");

                    b.Property<double>("Price45Min");

                    b.Property<double>("Price60Min");

                    b.HasKey("Id");

                    b.HasIndex("MentorId")
                        .IsUnique();

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("mentor_api.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Specialization");
                });

            modelBuilder.Entity("mentor_api.Models.TeachingSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryId");

                    b.Property<int?>("MentorId");

                    b.Property<int?>("SpecializationId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MentorId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("TeachingSpecializations");
                });

            modelBuilder.Entity("mentor_api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<DateTime>("LastActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("mentor_api.Models.Mentor", b =>
                {
                    b.HasOne("mentor_api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mentor_api.Models.MentorCity", b =>
                {
                    b.HasOne("mentor_api.Models.City", "City")
                        .WithMany("MentorCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mentor_api.Models.Mentor", "Mentor")
                        .WithMany("MentorCities")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mentor_api.Models.Phone", b =>
                {
                    b.HasOne("mentor_api.Models.Mentor", "Mentor")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mentor_api.Models.Picture", b =>
                {
                    b.HasOne("mentor_api.Models.Mentor", "Mentor")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("mentor_api.Models.Picture", "MentorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mentor_api.Models.Price", b =>
                {
                    b.HasOne("mentor_api.Models.Mentor", "Mentor")
                        .WithOne("Price")
                        .HasForeignKey("mentor_api.Models.Price", "MentorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mentor_api.Models.TeachingSpecialization", b =>
                {
                    b.HasOne("mentor_api.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("mentor_api.Models.Mentor")
                        .WithMany("TeachingSpecializations")
                        .HasForeignKey("MentorId");

                    b.HasOne("mentor_api.Models.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId");
                });
#pragma warning restore 612, 618
        }
    }
}
