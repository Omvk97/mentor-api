// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mentor_api.Data;

namespace mentor_API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("mentor_api.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("PostalCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("PostalCode");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("mentor_api.Models.Mentor", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("Description");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(8);

                    b.Property<string>("TeachingInformation");

                    b.HasKey("UserId");

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("mentor_api.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("MentorId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("MentorId")
                        .IsUnique();

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("mentor_api.Models.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MentorId");

                    b.Property<int>("Price30Min");

                    b.Property<int>("Price45Min");

                    b.Property<int>("Price60Min");

                    b.HasKey("Id");

                    b.HasIndex("MentorId")
                        .IsUnique();

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("mentor_api.Models.TeachableCities", b =>
                {
                    b.Property<int>("MentorId");

                    b.Property<int>("CityId");

                    b.HasKey("MentorId", "CityId");

                    b.HasIndex("CityId");

                    b.ToTable("TeachableCities");
                });

            modelBuilder.Entity("mentor_api.Models.Teachings.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("mentor_api.Models.Teachings.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("mentor_api.Models.Teachings.Teaching", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<int>("MentorId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MentorId");

                    b.ToTable("Teachings");
                });

            modelBuilder.Entity("mentor_api.Models.Teachings.TeachingSpecialization", b =>
                {
                    b.Property<int>("SpecializationId");

                    b.Property<int>("TeachingId");

                    b.HasKey("SpecializationId", "TeachingId");

                    b.HasIndex("TeachingId");

                    b.ToTable("TeachingSpecializations");
                });

            modelBuilder.Entity("mentor_api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<DateTime>("LastActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("mentor_api.Models.Mentor", b =>
                {
                    b.HasOne("mentor_api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mentor_api.Models.Picture", b =>
                {
                    b.HasOne("mentor_api.Models.Mentor", "Mentor")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("mentor_api.Models.Picture", "MentorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mentor_api.Models.Price", b =>
                {
                    b.HasOne("mentor_api.Models.Mentor", "Mentor")
                        .WithOne("Price")
                        .HasForeignKey("mentor_api.Models.Price", "MentorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mentor_api.Models.TeachableCities", b =>
                {
                    b.HasOne("mentor_api.Models.City", "City")
                        .WithMany("TeachableCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mentor_api.Models.Mentor", "Mentor")
                        .WithMany("TeachableCities")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mentor_api.Models.Teachings.Teaching", b =>
                {
                    b.HasOne("mentor_api.Models.Teachings.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mentor_api.Models.Mentor", "Mentor")
                        .WithMany("Teachings")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mentor_api.Models.Teachings.TeachingSpecialization", b =>
                {
                    b.HasOne("mentor_api.Models.Teachings.Specialization", "Specialization")
                        .WithMany("Teachings")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mentor_api.Models.Teachings.Teaching", "Teaching")
                        .WithMany("TeachingSpecializations")
                        .HasForeignKey("TeachingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
